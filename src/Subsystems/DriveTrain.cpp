// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Drive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	CANTalonLeftFront = RobotMap::driveTrainCANTalonLeftFront;
	CANTalonLeftRear = RobotMap::driveTrainCANTalonLeftRear;
	CANTalonRightFront = RobotMap::driveTrainCANTalonRightFront;
	CANTalonRightRear = RobotMap::driveTrainCANTalonRightRear;
	robotDrive = RobotMap::driveTrainRobotDrive;
	driveGyro = RobotMap::driveTrainDriveGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	//Need to reverse encoder direction for the right hand motors:
	CANTalonRightFront->SetSensorDirection(true);
	CANTalonRightRear->SetSensorDirection(true);
	CANTalonLeftFront->SetSensorDirection(true);
	CANTalonLeftRear->SetSensorDirection(true);

	CANTalonLeftFront->ConfigNeutralMode(CANTalon::kNeutralMode_Brake);
	CANTalonRightFront->ConfigNeutralMode(CANTalon::kNeutralMode_Brake);
	CANTalonLeftRear->ConfigNeutralMode(CANTalon::kNeutralMode_Brake);
	CANTalonRightRear->ConfigNeutralMode(CANTalon::kNeutralMode_Brake);
}
void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem

void DriveTrain::drive(float x, float y, float z)
{
	robotDrive->MecanumDrive_Cartesian(x,y,z);
}

float DriveTrain::GetGyroRate()
{
	return driveGyro->GetRate();
}

float DriveTrain::GetGyroAngle()
{
	return driveGyro -> GetAngle();
}

void DriveTrain::EncoderReset()
{
	RobotMap::driveTrainCANTalonLeftFront -> SetPosition(0);
	RobotMap::driveTrainCANTalonLeftRear -> SetPosition(0);
	RobotMap::driveTrainCANTalonRightRear -> SetPosition(0);
	RobotMap::driveTrainCANTalonRightFront -> SetPosition(0);

}


// here. Call these from Commands.

