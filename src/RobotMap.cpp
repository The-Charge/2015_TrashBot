// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

CANTalon* RobotMap::driveTrainCANTalonLeftFront = NULL;
CANTalon* RobotMap::driveTrainCANTalonLeftRear = NULL;
CANTalon* RobotMap::driveTrainCANTalonRightFront = NULL;
CANTalon* RobotMap::driveTrainCANTalonRightRear = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive = NULL;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::winchSystemwinchMotor = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	driveTrainCANTalonLeftFront = new CANTalon(99); // changed from 11 to 99 for testing

	driveTrainCANTalonLeftRear = new CANTalon(2);

	driveTrainCANTalonRightFront = new CANTalon(3);

	driveTrainCANTalonRightRear = new CANTalon(5);
	driveTrainRobotDrive = new RobotDrive(driveTrainCANTalonLeftFront,
			driveTrainCANTalonLeftRear, driveTrainCANTalonRightFront,
			driveTrainCANTalonRightRear);

	driveTrainRobotDrive->SetSafetyEnabled(false);
	driveTrainRobotDrive->SetExpiration(0.1);
	driveTrainRobotDrive->SetSensitivity(0.5);
	driveTrainRobotDrive->SetMaxOutput(1.0);

	driveTrainRobotDrive->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
	driveTrainRobotDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);


	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	winchSystemwinchMotor = new Talon(1);
	lw->AddActuator("WinchSystem", "winchMotor", (Talon*) winchSystemwinchMotor);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	// sets feed-back device to get values from each encoder
	driveTrainCANTalonLeftFront->SetFeedbackDevice(CANTalon::QuadEncoder);
	driveTrainCANTalonLeftRear->SetFeedbackDevice(CANTalon::QuadEncoder);
	driveTrainCANTalonRightFront->SetFeedbackDevice(CANTalon::QuadEncoder);
	driveTrainCANTalonRightRear->SetFeedbackDevice(CANTalon::QuadEncoder);



}
