// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "TurnNDegrees.h"
#include "math.h"

TurnNDegrees::TurnNDegrees(float d) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	SmartDashboard::PutNumber(ANGLE_TO_TURN, TURNING_DEFAULT);
	SmartDashboard::PutNumber(TURNING_SPEED, TURNING_SPEED_DEFAULT);


}

// Called just before this Command runs the first time
void TurnNDegrees::Initialize() {
	
	this ->SetTimeout(10); // 10 sec safety timer

	degreesturning = d;

	if (degreesturning == 0) // if the command accually sends a value and is needed to be changed
		{
			degreesturning = SmartDashboard:: GetNumber(ANGLE_TO_TURN, TURNING_DEFAULT);
			speed = SmartDashboard::GetNumber(TURNING_SPEED, TURNING_SPEED_DEFAULT);

			speed = abs(speed);

			// degreesturing can take a negative or a positive value, speed cannot
		}
	startAngle = Robot::driveTrain -> driveGyro -> GetAngle(); // gets the starting angle for the command
}

// Called repeatedly when this Command is scheduled to run
void TurnNDegrees::Execute() {
	
	if (degreesturning > 0 )
		Robot::driveTrain -> drive(0, 0, speed); // clockwise

	if ( degreesturning < 0)
		Robot::driveTrain -> drive(0, 0, speed * -1); //  counter-clockwise

	angleAt = Robot::driveTrain->driveGyro->GetAngle(); // angle the robot is currently at

}

// Make this return true when this Command no longer needs to run execute()
bool TurnNDegrees::IsFinished() {

	if ((angleAt <= finalAngle + 10 && angleAt >= finalAngle - 10)) // checks to see if the angle turned is withing the desired angle
		return true;

	else
	return false || this -> IsTimedOut(); // when timer is done it will end the command
}

// Called once after isFinished returns true
void TurnNDegrees::End() {
	Robot::driveTrain -> drive(0, 0, 0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TurnNDegrees::Interrupted() {
	End();
}


