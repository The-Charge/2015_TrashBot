// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#ifndef LIFTXTICKS_H
#define LIFTXTICKS_H

#include "Commands/Subsystem.h"
#include "../Robot.h"

/**
 *

 * @author ExampleAuthor
 */
class LiftXTicks: public Command {
public:

	float timeout;


	const int LIFT_DEADBAND_DEFAULT = 1024; // 1/8 of the total ticks in one rotation of the encoder
	const int TICKS_LIFT_DEFAULT = 30000;
	const float SPEED_LIFT_DEFAULT = 0.5;


	const std::string MAX_VALUE_TICKS = "Lift Ticks Max: ";
	const std::string LIFT_ENCODER_VALUE = "Lift encoder Current value: ";
	const std::string LIFT_DEADBAND_STRING = "Lift deadband: ";
	const std::string LIFT_SPEED_STRING = "lift::LiftXticks Speed of Lift: ";
	const std::string LIFT_TICKS_STRING = "lift::LiftXticks Placement of Lift: ";

	const std::string LIFT_TIMEOUT_STRING = "lift::Safety TimeOut value: ";

	int LIFT_ENCODER_TICKS = Robot::lift->encoder->Get();

	int deadbandlift = 0;
	float speed = 0;
	int ticks = 0;

	LiftXTicks(int, float);
	virtual void Initialize();
	virtual void Execute();
	virtual bool IsFinished();
	virtual void End();
	virtual void Interrupted();

private:

	float liftRatio = 0;
};

#endif
