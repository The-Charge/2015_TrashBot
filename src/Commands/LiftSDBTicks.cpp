// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "LiftSDBTicks.h"

LiftSDBTicks::LiftSDBTicks() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::lift);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	Robot::lift->PutDashboardValues();
	speed = 0;
	ticks = 0;
}

// Called just before this Command runs the first time
void LiftSDBTicks::Initialize() {
	Robot::lift -> BrakeOff();
	this -> SetTimeout(2);
	ticks = SmartDashboard::GetNumber(LIFT_TICKS_DASHBOARD_KEY, TICKS_LIFT_DEFAULT);
	//speed = SmartDashbaord::GetNumber(LIFT_SPEED_DASHBOARD_KEY, SPEED_LIFT_DEFAULT);
	Robot::lift -> speedController -> Set(speed);
}

// Called repeatedly when this Command is scheduled to run
void LiftSDBTicks::Execute() {
	Robot::lift -> PutDashboardValues();
}

// Make this return true when this Command no longer needs to run execute()
bool LiftSDBTicks::IsFinished() {
	if (Robot::lift-> KeepLifting(ticks, speed) || this -> IsTimedOut())
	{
		return true;
	}
	else
	{
		return false;
	}
}

// Called once after isFinished returns true
void LiftSDBTicks::End() {
	Robot::lift -> speedController -> Set(0);
	Robot::lift -> BrakeOn();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LiftSDBTicks::Interrupted() {
	End();
}
