// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Drive2Feet.h"
#include "../Util/PIDCanTalon.h"

Drive2Feet::Drive2Feet() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	TICKS_NEEDED = Robot::driveTrain->ENCODER_TICKS_PER_REVOLUTION * 2;//Robot:: driveTrain -> WHEELROTATIONS_PER_FOOT * 20 * Robot::driveTrain -> ENCODER_TICKS_PER_REVOLUTION;
	SmartDashboard:: PutNumber (TICKS_NEEDED_DASHBOARD_KEY, TICKS_NEEDED);
	//SmartDashboard::PutNumber(MAX_PERCENT_DASHBOARD_KEY, MAX_PERCENT_DEFAULT);
	//SmartDashboard::PutNumber(INTEGRAL_CONSTANT_DAHSBOARD_KEY, INTEGRAL_CONSTANT_DEFAULT);
	//SmartDashboard::PutNumber(PROPORTIONAL_CONSTANT_DASHBOARD_KEY , PROPORTIONAL_CONSTANT_DEFAULT);
	//SmartDashboard:: PutNumber(CLOSED_LOOP_ERROR_DASHBOARD_KEY,CLOSED_LOOP_ERROR_DEFAULT);
	//SmartDashboard :: PutNumber (ENCODER_POSITION_DASHBOARD_KEY, ENCODER_POSITION_DEFAULT);
}

// Called just before this Command runs the first time
void Drive2Feet::Initialize() {

	this -> SetTimeout(10);
	Robot::driveTrain -> EncoderReset();

	/*
	//Change the mode to position instead of percent:
	Robot:: driveTrain -> CANTalonLeftFront -> SetControlMode(CANTalon::kPosition);
	Robot::driveTrain -> CANTalonLeftRear -> SetControlMode(CANTalon::kPosition);
	Robot:: driveTrain -> CANTalonRightFront -> SetControlMode(CANTalon::kPosition);
	Robot::driveTrain -> CANTalonRightRear -> SetControlMode(CANTalon::kPosition);

	//You need to immediately set the position to 0:
	Robot::driveTrain->CANTalonLeftFront->Set(0);
	Robot::driveTrain->CANTalonLeftRear->Set(0);
	Robot::driveTrain->CANTalonRightFront->Set(0);
	Robot::driveTrain->CANTalonRightRear->Set(0);

	Robot:: driveTrain -> CANTalonLeftFront -> ConfigMaxOutputVoltage(maxvoltage);
		Robot:: driveTrain -> CANTalonLeftRear -> ConfigMaxOutputVoltage(maxvoltage);
		Robot:: driveTrain -> CANTalonRightFront -> ConfigMaxOutputVoltage(maxvoltage);
		Robot:: driveTrain -> CANTalonRightRear -> ConfigMaxOutputVoltage(maxvoltage);

	Robot:: driveTrain -> CANTalonLeftFront -> SetPID(p, i, 0);
	Robot:: driveTrain -> CANTalonLeftRear -> SetPID(p, i, 0);
	Robot:: driveTrain -> CANTalonRightFront -> SetPID(p, i, 0);
	Robot:: driveTrain -> CANTalonRightRear -> SetPID(p, i, 0);

	//Robot::driveTrain->CANTalonRightFront->SetCloseLoopRampRate(rampRate);
	Robot::driveTrain->CANTalonLeftFront->SetVoltageRampRate(rampRate);
	Robot::driveTrain->CANTalonRightFront->SetVoltageRampRate(rampRate);
	Robot::driveTrain->CANTalonLeftRear->SetVoltageRampRate(rampRate);
	Robot::driveTrain->CANTalonRightRear->SetVoltageRampRate(rampRate);


	Robot:: driveTrain -> CANTalonLeftFront -> Set(TICKS_NEEDED);
	Robot:: driveTrain -> CANTalonLeftRear -> Set(TICKS_NEEDED);
	Robot:: driveTrain -> CANTalonRightFront -> Set(-TICKS_NEEDED);
	Robot:: driveTrain -> CANTalonRightRear -> Set(-TICKS_NEEDED);
	*/


}

// Called repeatedly when this Command is scheduled to run
void Drive2Feet::Execute() {

}

// Make this return true when this Command no longer needs to run execute()
bool Drive2Feet::IsFinished() {
	 return ((Robot:: driveTrain -> leftFrontPIDController->OnTarget() && Robot:: driveTrain -> leftRearPIDController->OnTarget() && Robot:: driveTrain -> rightFrontPIDController->OnTarget() && Robot:: driveTrain -> rightRearPIDController->OnTarget()) || this ->IsTimedOut());
}

// Called once after isFinished returns true
void Drive2Feet::End() {
		Robot:: driveTrain -> leftFrontPIDController->Disable();
		Robot:: driveTrain -> rightFrontPIDController->Disable();
		Robot:: driveTrain -> leftRearPIDController->Disable();
		Robot:: driveTrain -> rightRearPIDController->Disable();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive2Feet::Interrupted() {
	End();
}
