// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "LiftUpSlow.h"

LiftUpSlow::LiftUpSlow() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::lift);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	SmartDashboard::PutNumber(LIFT_ENCODER_MAX_STRING, LIFT_ENCODER_MAX); // to set a maximum on the robot

	SmartDashboard::PutNumber(OFFSET_LIFT_MAX, OFFSET_LIFT_DEFAULT_MAX); // for the maximum lift offset
	SmartDashboard::PutNumber(OFFSET_LIFT_MIN, OFFSET_LIFT_DEFAULT_MIN); // for later code
}

// Called just before this Command runs the first time
void LiftUpSlow::Initialize() {

	offsetmin  = SmartDashboard::GetNumber(OFFSET_LIFT_MIN, OFFSET_LIFT_DEFAULT_MIN);
	offsetmax = SmartDashboard::GetNumber(OFFSET_LIFT_MAX, OFFSET_LIFT_DEFAULT_MAX);

	maxHeight = SmartDashboard::GetNumber(LIFT_ENCODER_MAX_STRING, LIFT_ENCODER_MAX); // gets value from smartdashboard

}

// Called repeatedly when this Command is scheduled to run
void LiftUpSlow::Execute() {

	SmartDashboard::PutNumber("Lift Encoder value: ", Robot::lift->encoder->Get()); // gets encoder value



}

// Make this return true when this Command no longer needs to run execute()
bool LiftUpSlow::IsFinished() {
	encoderLiftvalue = Robot::lift->encoder->Get(); // gets encoder value
	if ((encoderLiftvalue >= (maxHeight - offsetmax)))// if encoder value is in the offset range it stops the command
		return true;

	return false;
}

// Called once after isFinished returns true
void LiftUpSlow::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LiftUpSlow::Interrupted() {

}
