// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.2015_TrashBot;

import org.usfirst.frc2619.2015_TrashBot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton resetEncodersButton;
    public JoystickButton drive2FeetButton;
    public Joystick joystick1;
    public JoystickButton liftUpFastBtn;
    public JoystickButton liftDownFastBtn;
    public JoystickButton liftUpSlowBtn;
    public JoystickButton liftDownSlowBtn;
    public JoystickButton leftArmInBtn;
    public JoystickButton rightArmInBtn;
    public JoystickButton rightArmOutBtn;
    public JoystickButton leftArmOutBtn;
    public Joystick buttonBox;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        buttonBox = new Joystick(1);
        
        leftArmOutBtn = new JoystickButton(buttonBox, 4);
        leftArmOutBtn.whenPressed(new LeftArmOut());
        rightArmOutBtn = new JoystickButton(buttonBox, 8);
        rightArmOutBtn.whenPressed(new RightArmOut());
        rightArmInBtn = new JoystickButton(buttonBox, 7);
        rightArmInBtn.whenPressed(new RightArmIn());
        leftArmInBtn = new JoystickButton(buttonBox, 3);
        leftArmInBtn.whenPressed(new LeftArmIn());
        liftDownSlowBtn = new JoystickButton(buttonBox, 6);
        liftDownSlowBtn.whileHeld(new LiftDownSlow());
        liftUpSlowBtn = new JoystickButton(buttonBox, 5);
        liftUpSlowBtn.whileHeld(new LiftUpSlow());
        liftDownFastBtn = new JoystickButton(buttonBox, 2);
        liftDownFastBtn.whileHeld(new LiftDownFast());
        liftUpFastBtn = new JoystickButton(buttonBox, 1);
        liftUpFastBtn.whileHeld(new LiftUpFast());
        joystick1 = new Joystick(0);
        
        drive2FeetButton = new JoystickButton(joystick1, 11);
        drive2FeetButton.whenPressed(new Drive2Feet());
        resetEncodersButton = new JoystickButton(joystick1, 8);
        resetEncodersButton.whenPressed(new ResetEncoders());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("Drive", new Drive());

        SmartDashboard.putData("ResetEncoders", new ResetEncoders());

        SmartDashboard.putData("Drive2Feet", new Drive2Feet());

        SmartDashboard.putData("BrakeOn", new BrakeOn());

        SmartDashboard.putData("BrakeOff", new BrakeOff());

        SmartDashboard.putData("DriveXFeet", new DriveXFeet());

        SmartDashboard.putData("LiftUpFast", new LiftUpFast());

        SmartDashboard.putData("LiftDownFast", new LiftDownFast());

        SmartDashboard.putData("LiftUpSlow", new LiftUpSlow());

        SmartDashboard.putData("LiftDownSlow", new LiftDownSlow());

        SmartDashboard.putData("LeftArmIn", new LeftArmIn());

        SmartDashboard.putData("RightArmIn", new RightArmIn());

        SmartDashboard.putData("LeftArmOut", new LeftArmOut());

        SmartDashboard.putData("RightArmOut", new RightArmOut());

        SmartDashboard.putData("AutonomousStrategyPush", new AutonomousStrategyPush());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getButtonBox() {
        return buttonBox;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

