// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include <CameraServer.h>
#include <Commands/Scheduler.h>
#include <DriverStation.h>
#include <nivision.h>
#include <NIIMAQdx.h>
#include <RobotBase.h>
#include <string>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveTrain* Robot::driveTrain = 0;
Brake* Robot::brake = 0;
Compressor1* Robot::compressor1 = 0;
Lift* Robot::lift = 0;
Arms* Robot::arms = 0;
OI* Robot::oi = 0;
IMAQdxSession session;
Image *frame;
IMAQdxError imaqError;
AxisCamera *camera;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain = new DriveTrain();
	brake = new Brake();
	compressor1 = new Compressor1();
	lift = new Lift();
	arms = new Arms();
	frame = imaqCreateImage(IMAQ_IMAGE_RGB, 0);
	frame = imaqCreateImage(IMAQ_IMAGE_RGB, 0);
	camera  = new AxisCamera("10.26.19.12");
	camera->WriteMaxFPS(10);
	camera->WriteResolution(AxisCamera::kResolution_320x240);
	camera->WriteCompression(70);
	camera = new AxisCamera("10.26.19.11");
	camera->WriteMaxFPS(10);
	camera->WriteResolution(AxisCamera::kResolution_320x240);
	camera->WriteCompression(70);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	camera->GetImage(frame);
	CameraServer::GetInstance()->SetImage(frame);
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

